haty
y
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red");points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
points3d(0,0,0, col = "black")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
haty = fitted(fit.y,x) %>% c()
haty
y - haty
t(y - haty) * y
t(y - haty) %*% y
t(y - haty) %*% haty
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
#true model
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
#estimate
fit.y = lm(y ~ x1 + x2+ 0)
x = cbind(x1,x2) %>% as.data.frame()
haty = predict(fit.y,x) %>% c()
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3") %>%
points3d(y[1],y[2], y[3],col = "red",cex = 2) %>%
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l") %>%
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue") %>%
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 2)
points3d(y[1],y[2], y[3],col = "red",cex = 3)
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "rotation")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "rotation")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "rotation")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "rotation")
y
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "l")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
t(y - haty) %*% haty
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
#true model
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
#fit
fit.y = lm(y ~ x1 + x2+ 0)
x = cbind(x1,x2) %>% as.data.frame()
haty = predict(fit.y,x) %>% c()
#generate beta
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
#graph
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "l")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
#check inner product
t(y - haty) %*% haty
1/1,2262
1/1,2262
1/1.2262
D = matrix(c(0,1,1,1,1,0,0,0,1,1))
D
D = matrix(c(0,1,1,1,1,0,0,0,1,1),nrow = 5)
D
E = matrix(c(0,1,0,0,0,0,0,0,1,0),nrow = 5)
rank(E)
rank(D,E)
matrix(E,D)
cbind(D,E)
cbind(D,E) %>% as.matrix()
require("reshape")
require("reshape2")
cbind(D,E) %>% as.matrix()
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function_revised.R")
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
#set value
n = 100
true_theta=c(40,0.1)
true_beta = rep(0,n)
z = diag(n)
dmatrix = mat_func(n)
# resolution in ADMM
epri = 1e-4
edul = 1e-4
A = dmatrix
B = -diag(n-2)
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# generate x in gev dist
set.seed(1)
y = sin(seq(0,2*pi,length = n))*20; mt = y +100  #sin
x= rep(0,n)
for (i in 1:n) {
x[i] = rgev(1,loc =mt[i],scale=true_theta[1],shape=true_theta[2])
}
plot(mt,main = "true_mu")
rm(list = ls())
library(evd)
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function_revised.R")
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
#set value
n = 100
true_theta=c(40,0.1)
true_beta = rep(0,n)
z = diag(n)
dmatrix = mat_func(n)
# resolution in ADMM
epri = 1e-4
edul = 1e-4
A = dmatrix
B = -diag(n-2)
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# generate x in gev dist
##1.
set.seed(1)
y = sin(seq(0,2*pi,length = n))*20; mt = y +100  #sin
x= rep(0,n)
for (i in 1:n) {
x[i] = rgev(1,loc =mt[i],scale=true_theta[1],shape=true_theta[2])
}
#model selection
init_rs = c()
seq(0.02,0.09,0.01)
lamb = seq(0.02,0.09,0.01)
length(lamb)
# i = 3
par(mfrow=c(2,2))
# i = 3
par(mfrow=c(2,2))
#update
for (i in 1:length(lamb)) {
lam = lamb[i]
init_rho = 0.5
z_init = rep(0,n-2) ; u_init = rep(1,n-2); init_mu = rep(Inf, n)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale #init sigma value
tvec[n+2] = 0.1
for (iter in 1:10000){
cat("*****iter:::", iter, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z,ctr_list)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = init_rho)
AA = init_rho*t(A)%*%B
sk = norm(drop(AA%*%(tmp_z -z_init)),"2")
rk = norm(drop(A%*%old_mu + B%*%tmp_z),"2")
if (rk<epri & sk <edul) break
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
plot(old_mu, type = "l",main = paste("lambda=",lam),ylim = c(30,170))
points(x,col="red")
#model selection
dmu = dmatrix %*% old_mu
stra = dmu - tmp_z
nonzero = length(which(abs(dmu) > 1e-1))
logl = - sum(dgev(x, loc = old_tvec[1:n], scale = old_tvec[n+1], shape = old_tvec[n+2], log = T) )
aic = 2*logl + 2*nonzero
bic = 2*logl + log(n)*nonzero
tmp_rs = cbind(nonzero,aic,bic)
init_rs = rbind(init_rs,tmp_rs)
}
init_rs
y = sin(seq(0,2*pi,length = n))*20 + seq(1,n)/3; mt = y +100
plot(mt)
y = sin(seq(0,2*pi,length = n))*20 + seq(1,n)/2; mt = y +100
plot(mt)
y = sin(seq(0,2*pi,length = n))*20 + seq(1,n); mt = y +100
plot(mt)
## 2. increasing
mt = seq(1,10,length.out = n)
plot(mt)
mt
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function_.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
str(Pr_46)
st = distinct(Pr_46,stnlds)
i = 1
st
str(Pr_46)
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
x
stnlds == st[i,]
Pr_46 %>% subset(stnlds == st[i,])
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
#init_value
n = length(x)
n
z = diag(n)
# plot(x)
true_beta = rep(0,n)
dmatrix = mat_func(n)
source("3_update_gev_function_.R")
source("3_update_gev_function.R")
dmatrix = mat_func(n)
plot(x)
n
rho = 0.5;lam = 0.1
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc
tvec[n+1] = start$scale
tvec[n+2] = 0.1
tvec
#update
# s_time = Sys.time()
for (iter in 1:10000) {
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
# resolution in ADMM
epri = 1e-4
edul = 1e-4
A = dmatrix
B = -diag(n-2)
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
str(Pr_46)
st = distinct(Pr_46,stnlds)
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
# resolution in ADMM
epri = 1e-4
edul = 1e-4
par(mfrow=c(2,2))
i = 1
# for (i in 1:nrow(st)) {
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
x
#init_value
n = length(x)
n
z = diag(n)
z
true_beta = rep(0,n)
dmatrix = mat_func(n)
rho = 0.5;lam = 0.1
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
A = dmatrix
B = -diag(n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc
tvec[n+1] = start$scale
tvec[n+2] = 0.1
#update
# s_time = Sys.time()
for (iter in 1:10000) {
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
AA = init_rho*t(A)%*%B
sk = norm(drop(AA%*%(tmp_z -z_init)),"2")
rk = norm(drop(A%*%old_mu + B%*%tmp_z),"2")
if (rk<epri & sk <edul) break
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
#update
# s_time = Sys.time()
for (iter in 1:10000) {
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z,ctr_list = ctr_list)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
AA = init_rho*t(A)%*%B
sk = norm(drop(AA%*%(tmp_z -z_init)),"2")
rk = norm(drop(A%*%old_mu + B%*%tmp_z),"2")
if (rk<epri & sk <edul) break
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
st = distinct(Pr_46,stnlds)
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
# resolution in ADMM
epri = 1e-4
edul = 1e-4
par(mfrow=c(2,2))
i = 1
# for (i in 1:nrow(st)) {
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
#init_value
n = length(x)
z = diag(n)
true_beta = rep(0,n)
dmatrix = mat_func(n)
init_rho = 0.5;lam = 0.1
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
A = dmatrix
B = -diag(n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc
tvec[n+1] = start$scale
tvec[n+2] = 0.1
#update
# s_time = Sys.time()
for (iter in 1:10000) {
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z,ctr_list = ctr_list)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
AA = init_rho*t(A)%*%B
sk = norm(drop(AA%*%(tmp_z -z_init)),"2")
rk = norm(drop(A%*%old_mu + B%*%tmp_z),"2")
if (rk<epri & sk <edul) break
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
# e_time = Sys.time()
# dif = e_time-s_time
# cat("지역:::",st[i,] ,dif,"\n")
plot(old_mu, type = "l",main = paste("지역:",st[i,],", lamda=",lam))
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("3_update_gev_function.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
st = distinct(Pr_46,stnlds)
# parameter used in optim()
ctr_list = list()
ctr_list$maxit = 20
ctr_list$reltol = 1e-6
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
# resolution in ADMM
epri = 1e-4
edul = 1e-4
par(mfrow=c(2,2))
i = 1
# for (i in 1:nrow(st)) {
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
#init_value
n = length(x)
z = diag(n)
true_beta = rep(0,n)
dmatrix = mat_func(n)
init_rho = 0.5;lam = 0.1
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
A = dmatrix
B = -diag(n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc
tvec[n+1] = start$scale
tvec[n+2] = 0.1
#update
# s_time = Sys.time()
for (iter in 1:10000) {
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z,ctr_list = ctr_list)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = init_rho)
AA = init_rho*t(A)%*%B
sk = norm(drop(AA%*%(tmp_z -z_init)),"2")
rk = norm(drop(A%*%old_mu + B%*%tmp_z),"2")
if (rk<epri & sk <edul) break
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
# e_time = Sys.time()
# dif = e_time-s_time
# cat("지역:::",st[i,] ,dif,"\n")
plot(old_mu, type = "l",main = paste("지역:",st[i,],", lamda=",lam))
par(mfrow=c(1,1))
plot(old_mu, type = "l",main = paste("지역:",st[i,],", lamda=",lam))
points(x,col = "red")
min(x)
max(x)
dmatrix%*%old_mu - tmp_z
#model selection
dmu = dmatrix %*% old_mu
dmu
nonzero = length(which(abs(dmu) > 1e-1))
nonzero
?lgev
if(!require(evd)){install.packages("evd")};require(evd)
?lgev
??lgev
require(Deriv)
??lgev
- sum(lgev(x, loc = loc.vec, scale = tvec[n+1], shape = tvec[n+2]))
logl = - sum(dgev(x, loc = old_tvec[1:n], scale = old_tvec[n+1], shape = old_tvec[n+2], log = T) )
??dgev
logl = - sum(dgev(x, loc = old_tvec[1:n], scale = old_tvec[n+1], shape = old_tvec[n+2], log = T) )
logl
aic = 2*logl + 2*nonzero
aic
bic = 2*logl + log(n)*nonzero
bic
