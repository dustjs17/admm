sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
# row.names(cx) = c("i","j","k")
library("rgl")
# scatter3d(x = cx[1, ],y = cx[2, ],z = cx[3, ])
# scatter3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "white", type = "p",
pch = 19, cex = 1, ticktype = "detailed" )
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/3)
arrow3d(p0 = c(0,0,0), p1 = haty,n=1,width = 1/3)
?points3d
dim(sample.beta)[1]
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
# row.names(cx) = c("i","j","k")
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red")
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
set.seed(1)
y
y = 2*x1 + x2 + rnorm(3,0,20)
y
haty = 2*x1 + x2
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
# row.names(cx) = c("i","j","k")
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/3)
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red");points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/3)
arrow3d(p0 = c(0,0,0), p1 = haty,n=1,width = 1/3)
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
y
y
lm(y~x + 0 )
lm(y~x1 + x2 + 0 )
lmy = lm(y ~ x1 + x2 )
fitted(x1,x2)
x = cbind(x1,x2)
fitted(x)
predict(lmy,x)
x = cbind(x1,x2) %>% as.data.frame()
predict(lmy,x)
haty = predict(lmy,x) %>% as.data.frame()
haty
y
y = 2*x1 + x2 + rnorm(3,0,20)
haty = 2*x1 + x2
haty
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
# row.names(cx) = c("i","j","k")
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red");points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/3)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/5)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2)
?arrow3d
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = haty,n=1,width = 1/3)
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
#true model
set.seed(1)
#estimate
fit.y = lm(y ~ x1 + x2)
fit.y
y
#estimate
fit.y = lm(y ~ x1 + x2+ 0)
fit.y
coef(fit.y)
fitted(fit.y,cbind(x1,x2))
y
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
#true model
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
y
#estimate
fit.y = lm(y ~ x1 + x2+ 0)
fitted(fit.y,cbind(x1,x2))
haty = fitted(fit.y,cbind(x1,x2))
haty
haty = fitted(fit.y,cbind(x1,x2)) %>% as.data.frame()
haty
y
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red");points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = haty,n=1,width = 1/3)
haty = fitted(fit.y,cbind(x1,x2)) %>% c()
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
haty = predict(fit.y,cbind(x1,x2)) %>% c()
x = cbind(x1,x2)
haty = predict(fit.y,x) %>% c()
x = cbind(x1,x2) %>% as.data.frame()
haty = predict(fit.y,x) %>% c()
haty
y
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
pch = 19, cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red");points3d(0,0,0, col = "black")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
points3d(0,0,0, col = "black")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
haty = fitted(fit.y,x) %>% c()
haty
y - haty
t(y - haty) * y
t(y - haty) %*% y
t(y - haty) %*% haty
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
#true model
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
#estimate
fit.y = lm(y ~ x1 + x2+ 0)
x = cbind(x1,x2) %>% as.data.frame()
haty = predict(fit.y,x) %>% c()
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3") %>%
points3d(y[1],y[2], y[3],col = "red",cex = 2) %>%
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l") %>%
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue") %>%
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 2)
points3d(y[1],y[2], y[3],col = "red",cex = 3)
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "rotation")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,thickness = 0.2,type = "rotation")
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "rotation")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "rotation")
y
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "l")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
t(y - haty) %*% haty
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
rm(list = ls())
x1 = c(5,7,10); x2 = c(1,3,5)
#true model
set.seed(1)
y = 2*x1 + x2 + rnorm(3,0,20)
#fit
fit.y = lm(y ~ x1 + x2+ 0)
x = cbind(x1,x2) %>% as.data.frame()
haty = predict(fit.y,x) %>% c()
#generate beta
beta1 = seq(-5,5); beta2 = seq(-5,5)
sample.beta = expand.grid(beta1 = beta1, beta2 = beta2)
cx = matrix(0,nrow = 3,ncol = dim(sample.beta)[1])
for (i in 1:dim(sample.beta)[1]) {
cx[,i] = sample.beta[i,1] * x1 + sample.beta[i,2]*x2
}
#graph
library("rgl")
plot3d(x = cx[1, ],y = cx[2, ],z = cx[3, ],phi = 0, bty = "g", col = "gray", type = "l",
cex = 1, ticktype = "detailed",xlab = "y1",ylab = "y2",zlab = "y3")
points3d(y[1],y[2], y[3],col = "red",cex = 4)
arrow3d(p0 = c(0,0,0), p1 = y,n=1,width = 1/10,type = "l")
arrow3d(p0 = haty, p1 = y,n=1,width = 1/10,thickness = 0.2,type = "l",col = "blue")
arrow3d(p0 = c(0,0,0), p1 = haty ,n=1,width = 1/3)
#check inner product
t(y - haty) %*% haty
1/1,2262
1/1,2262
1/1.2262
D = matrix(c(0,1,1,1,1,0,0,0,1,1))
D
D = matrix(c(0,1,1,1,1,0,0,0,1,1),nrow = 5)
D
E = matrix(c(0,1,0,0,0,0,0,0,1,0),nrow = 5)
rank(E)
rank(D,E)
matrix(E,D)
cbind(D,E)
cbind(D,E) %>% as.matrix()
require("reshape")
require("reshape2")
cbind(D,E) %>% as.matrix()
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("admmgev.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
str(Pr_46)
st = distinct(Pr_46,stnlds)
st
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
#init_value
n = length(x)
z = diag(n)
# plot(x)
true_beta = rep(0,n)
dmatrix = mat_func(n)
rho = 0.5;lam = 5
# par(mfrow=c(2,2))
for (i in 1:nrow(st)) {
# i = 1
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale #이거......
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale
#update
# s_time = Sys.time()
for (iter in 1:300) {
# cat("*****iter:::", iter==200, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
# e_time = Sys.time()
# dif = e_time-s_time
# cat("지역:::",st[i,] ,dif,"\n")
plot(old_mu, type = "l",main = paste("지역:",st[i,],", lamda=",lam))
}
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
rho = 0.5;lam = 5
# par(mfrow=c(2,2))
for (i in 1:nrow(st)) {
# i = 1
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
#init_value
n = length(x)
z = diag(n)
# plot(x)
true_beta = rep(0,n)
dmatrix = mat_func(n)
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale #이거......
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale
#update
# s_time = Sys.time()
for (iter in 1:300) {
# cat("*****iter:::", iter==200, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
# e_time = Sys.time()
# dif = e_time-s_time
# cat("지역:::",st[i,] ,dif,"\n")
plot(old_mu, type = "l",main = paste("지역:",st[i,],", lamda=",lam))
}
set.seed(2018)
n = 100
#init value
sol_beta = seq(0,100,length.out = n) # beta : n*1
y = sol_beta + rnorm(n,0,1)  ## y : n*1
dmatrix = matrix(0,n-2,n)   ## dmatrix : (n-2)*n
for (i in 2:n-2) {
dmatrix[i,i] = 1
dmatrix[i,i+1] = -2
dmatrix[i,i+2] = 1
}
rho = 0.5; lam = 5; imatrix = diag(1, n, n)
rhodd = rho * t(dmatrix) %*% dmatrix
first_term = solve(imatrix + rhodd)
z_init = c(rep(0,n-2)); u_init = c(rep(1,n-2))
sec_term = rho * t(dmatrix)
#update function
func_beta <- function(first_term,y,z,u,rho,sec_term)
{
beta = first_term %*% {y + sec_term %*% (z-u)}
return(beta)
}
func_z <- function(dmatrix,beta,u,lam,rho)
{
z = ifelse(abs(dmatrix %*% beta + u) > (lam/rho) ,
(dmatrix %*% beta) + u - sign(u + (dmatrix %*% beta)) * (lam /rho), 0)
return(z)
}
func_u <- function(dmatrix,beta,z,u)
{
u <- u + (dmatrix %*% beta) - z
return(u)
}
i = 1
while(i <= 100)
{
tmp_beta = func_beta(z = z_init,u = u_init,
rho = rho, y = y , first_term = first_term, sec_term = sec_term)
tmp_z = func_z(dmatrix = dmatrix, u = u_init, beta = tmp_beta, lam = lam,
rho = rho)
tmp_u = func_u(dmatrix = dmatrix ,beta = tmp_beta, z = tmp_z, u = u_init)
u_init = tmp_u
z_init = tmp_z
i <- i+1
}
solution = list(tmp_beta , tmp_z , tmp_u)
solution[[1]]
plot(y)
plot(tmp_beta)
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("admmgev.R")
# optim control
optim_controlList = list()
optim_controlList$maxit = 1e+3
#set value
n = 100
true_theta=c(30,0.1)
true_beta = rep(0,n)
y = sin(seq(0,2*pi,length = n))*10; mt = y +100  #sin
x= rep(0,n); set.seed(1)
for (i in 1:n) {
x[i] = rgev(1,loc =mt[i],scale=true_theta[1],shape=true_theta[2])
}
z = diag(n)
# init value
dmatrix = mat_func(n)
rho = 0.5;lam = 2
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale #이거......
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale #init sigma value
#update
for (iter in 1:500) {
# cat("*****iter:::", iter, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
plot(old_mu, type = "l",main = "optim")
points(x,col="red")
plot(x)
#set value
n = 100
true_theta=c(30,0.1)
true_beta = rep(0,n)
y = sin(seq(0,2*pi,length = n))*10; mt = y +100  #sin
x= rep(0,n); set.seed(1)
for (i in 1:n) {
x[i] = rgev(1,loc =mt[i],scale=true_theta[1],shape=true_theta[2])
}
z = diag(n)
# init value
dmatrix = mat_func(n)
rho = 0.5;lam = 20
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale #이거......
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale #init sigma value
#update
for (iter in 1:500) {
# cat("*****iter:::", iter, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
plot(old_mu, type = "l",main = "optim")
rm(list = ls())
setwd("C:/Users/UOS/Documents/GitHub/admm")
source("admmgev.R")
if(!require(dplyr)){install.packages("dplyr")};require(dplyr)
load("C:/Users/UOS/서울시립대학교/전종준 - lab_work/Lab_process/HIJ/kma_data/Pr_46.RData")
str(Pr_46)
st = distinct(Pr_46,stnlds)
# i = 1
x = Pr_46 %>% subset(stnlds == st[i,])
x = x$pr
#set value
n = 100
true_theta=c(30,0.1)
true_beta = rep(0,n)
y = sin(seq(0,2*pi,length = n))*10; mt = y +100  #sin
x= rep(0,n); set.seed(1)
for (i in 1:n) {
x[i] = rgev(1,loc =mt[i],scale=true_theta[1],shape=true_theta[2])
}
z = diag(n)
# init value
dmatrix = mat_func(n)
rho = 0.5;lam = 2000
z_init = rep(0,n-2) ; u_init = rep(1,n-2)
start <- list()
start$scale <- sqrt(6 * var(x))/pi
start$loc <- mean(x) - 0.58 * start$scale #이거......
tvec = c(true_beta,0,0)
tvec[1:n] = start$loc  #init mu value
tvec[n+1] = start$scale #init sigma value
#update
for (iter in 1:500) {
# cat("*****iter:::", iter, "\n")
#mu, sigma, k optim
old_tvec = gevreg(x = x,z = z)
old_mu = old_tvec[1:n]
# z update in ADMM
tmp_z = func_z(dmatrix = dmatrix, mu = old_mu, u = u_init,lam = lam, rho = rho)
# u update in ADMM
tmp_u = func_u(dmatrix = dmatrix , mu = old_mu, z = tmp_z, u = u_init)
u_init = tmp_u ; z_init = tmp_z
tvec = old_tvec
}
plot(old_mu, type = "l",main = "optim")
